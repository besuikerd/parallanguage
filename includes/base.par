map f list = match list{
	Cons x xs -> (Cons (function x) (map function xs))
	Empty -> Empty
}

foldl f a list = match list{
	Cons x xs -> (foldl (f a x) list)
	Empty -> a 
}

if = \x true false -> match x{
	True -> true
	False -> false
}

gt x y = match compare(x, y) {
	GT -> True
	_ -> False
}

gte x y = match compare(x, y){
	LT -> False
	_ -> True
}

lt x y = match compare(x, y) {
	LT -> True
	_ -> False
}

lte x y = match compare(x, y){
	GT -> False
	_ -> True
}

eq x y = match compare(x, y) {
	EQ -> True
	_ -> False
}

concat a b = match a{
	Cons x xs -> (Cons x (concat xs b))
	Empty -> b
}

filter pred l = match l {
	Cons x xs -> if( pred(x), (Cons x filter(pred, xs)), filter(pred, xs))
	Empty -> Empty
}

qsort l = match l {
	Cons x xs -> concat(concat(qsort(filter(lte(x), xs)), [x]), qsort(filter(gt(x), xs)))
	Empty -> Empty
}
