id x = x

map f list = match list{
	Cons x xs -> (Cons (f x) (map f xs))
	Nil -> Nil
}

foldl f a list = match list{
	Cons x xs -> foldl(f, (f a x), xs)
	Nil -> a 
}

length list = foldl(\x y -> plus(x, 1), 0, list)


integer_min = -2147483648
integer_max = 2147483647

sum list = foldl(\x y -> plus(x, y), 0, list)
avg list = div(sum(list), length(list))

min list = foldl(\x y -> match compare(x, y){
	GT -> y
	_ -> x
}, integer_max, list)

max list = foldl(\x y -> match compare(x, y){
	GT -> x
	_ -> y
}, integer_min, list)

// DANGEROUS! because of strictness, true and false are both evaluated
if bool true false = match bool{
	True -> true
	False -> false
}

gt x y = match compare(x, y) {
	GT -> True
	_ -> False
}

gte x y = match compare(x, y){
	LT -> False
	_ -> True
}

lt x y = match compare(x, y) {
	LT -> True
	_ -> False
}

lte x y = match compare(x, y){
	GT -> False
	_ -> True
}

eq x y = match compare(x, y) {
	EQ -> True
	_ -> False
}

concat a b = match a{
	Cons x xs -> (Cons x (concat xs b))
	Nil -> b
}

filter pred l = match l {
	Cons x xs -> match pred(x) {
		True -> (Cons x filter(pred, xs)) 
		False -> filter(pred, xs)
	}
	Nil -> Nil
}

math.max a b = if(gt(a,b), a, b)


qsort l = match l {
	Cons x xs -> concat(qsort(filter(\y -> lte(y, x), xs)), (Cons x qsort(filter(\y -> gt(y, x), xs))))
	Nil -> Nil
}
